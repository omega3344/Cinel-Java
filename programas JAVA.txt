public class Main {

	public static void main(String[] args){
		
		int x = 123;
		double y = 3.14;
		boolean z = true;
		char symbol = '@';
		String name = "Bro";
		
		System.out.println("Hello "+name);
		
	}
}


//**********************************************
public class Main {

	public static void main(String[] args) {
		
		String x = "water";
		String y = "Kool-Aid";
		String temp;
		
		temp = x;
		x=y;
		y=temp;
		
		System.out.println("x: "+x);
		System.out.println("y: "+y);
	}
}
//**********************************************

public class Main {

 public static void main(String[] args) {
  
  Scanner scanner = new Scanner(System.in);
  
  System.out.println("What is your name? ");
  String name = scanner.nextLine();
  
  System.out.println("How old are you? ");
  int age = scanner.nextInt();
  scanner.nextLine();
  
  System.out.println("What is your favorite food?");
  String food = scanner.nextLine();
   
  System.out.println("Hello "+name);
  System.out.println("You are "+age+" years old");
  System.out.println("You like "+food);

 } 
}

******************************************************
public class Main {

 public static void main(String[] args) {
  
  // expression =     operands & operators
  // operands =  values, variables, numbers, quantity
  // operators = + - * / % 

 } 
}

****************************************************

import javax.swing.JOptionPane;

public class Main {

	public static void main(String[] args) {
		
		String name = JOptionPane.showInputDialog("Enter your name");
		JOptionPane.showMessageDialog(null, "Hello "+name);
		
		int age = Integer.parseInt(JOptionPane.showInputDialog("Enter your age"));
		JOptionPane.showMessageDialog(null, "You are "+age+" years old");
		
		double height = Double.parseDouble(JOptionPane.showInputDialog("Enter your height"));
		JOptionPane.showMessageDialog(null, "You are "+height+" cm tall");
	}	
}

*****************************************************************


import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		
		double x;
		double y;
		double z;
		
		Scanner scanner = new Scanner(System.in);
				
		System.out.println("Enter side x: ");
		x = scanner.nextDouble();
		System.out.println("Enter side y: ");
		y = scanner.nextDouble();
		
		z = Math.sqrt((x*x)+(y*y));
		
		System.out.println("The hypotenuse is : "+z);
		
		scanner.close();
				
	}
}

****************************************************************************


import java.util.Random;

public class Main {

	public static void main(String[] args) {
		
		Random random = new Random();
		
		int x = random.nextInt(6)+1;
		//double y = random.nextDouble();
		//boolean z = random.nextBoolean();
		
		System.out.println(x);
				
	}
}

*********************************************************


public class Main {

	public static void main(String[] args) {
		
		// if statement = performs a block of code if it's condition evaluates to be true
		
		int age = 75;
		
		if(age==75) {
			System.out.println("Ok Boomer!");
		}
		else if(age>=18) {
			System.out.println("You are an adult!");
		}
		else if(age>=13) {
			System.out.println("You are a teenager!");
		}
		else {
			System.out.println("You are not an adult!");
		}
				
	}
}

************************************************************************

public class Main {

	public static void main(String[] args) {
		
		// switch = statement that allows a variable to be tested for equality against a list of values
		
		String day = "Friday";
		
		switch(day) {
			case "Sunday": System.out.println("It is Sunday!");
			break;
			case "Monday": System.out.println("It is Monday!");
			break;
			case "Tuesday": System.out.println("It is Tuesday!");
			break;
			case "Wednesday": System.out.println("It is Wednesday!");
			break;
			case "Thursday": System.out.println("It is Thursday!");
			break;
			case "Friday": System.out.println("It is Friday!");
			break;
			case "Saturday": System.out.println("It is Saturday!");
			break;
			default: System.out.println("That is not a day!");
		}
				
	}
}

**************************************************************************

public class Main {

	public static void main(String[] args) {
		
		// logical operators = used to connect two or more expressions
		//
		//						&& = (AND) both conditions must be true
		// 						|| = (OR) either condition must be true
		//						! = (NOT) reverses boolean value of condition

// -------------------------------- Example 1 --------------------------------
/*
		int temp = 15;
		
		if(temp>30) {
			System.out.println("It is hot outside");
		}
		else if(temp>=20 && temp<=30) {
			System.out.println("It is warm outside");
		}
		else {
			System.out.println("It is cold outside");
		}

*/
// -------------------------------- Example 2 --------------------------------
/*
		Scanner scanner = new Scanner(System.in);
		
		System.out.println("You are playing a game! Press q or Q to quit");
		String response = scanner.next();
		
		if(!response.equals("q") && !response.equals("Q")) {
			System.out.println("YOu are still playing the game *pew pew*");
		}
		else {
			System.out.println("You quit the game");
		}
*/	
	}
}

****************************************************************


import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		
		// while loop = executes a block of code as long as a it's condition remains true

		Scanner scanner = new Scanner(System.in);
		String name = "";
		
		while(name.isBlank()) {
			System.out.print("Enter your name: ");
			name = scanner.nextLine();
		}
		System.out.println("Welcome "+name);
		
	}
}

****************************************************************

public class Main {

	public static void main(String[] args) {
		
		// for loop = executes a block of code a limited amount of times
		
		for(int i=10; i>=0; i--) {
			System.out.println(i);
		}
		System.out.println("Happy new year!");
		
	}
}

************************************************************

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		
		// nested loops = a loop inside of a loop
		
		Scanner scanner = new Scanner(System.in);
		int rows;
		int columns;
		String symbol = "";
		
		System.out.println("Enter # of rows: ");
		rows = scanner.nextInt();
		System.out.println("Enter # of columns: ");
		columns = scanner.nextInt();
		System.out.println("Enter symbol to use: ");
		symbol = scanner.next();
		
		for(int i=1; i<=rows; i++) {
			System.out.println();
			for(int j=1; j<=columns;j++) {
				System.out.print(symbol);
			}
		}	
	}
}

*******************************************************************

public class Main {

	public static void main(String[] args) {
			
		// array = used to store multiple values within a single variable
		
		String[] cars = new String[3];
		
		cars[0] = "Camaro";
		cars[1] = "Corvette";
		cars[2] = "Tesla";
			
		for(int i=0; i<cars.length; i++) {
			System.out.println(cars[i]);
		}
	
	}
}

*********************************************************************

public class Main {

	public static void main(String[] args) {
			
		// 2D array = an array of arrays
		
		String[][] cars = 	{	
								{"Camaro","Corvette","Silverado"},
								{"Mustang","Ranger","F-150"},
								{"Ferrari","Lambo","Tesla"}
							};
		
		/*
		cars[0][0] = "Camaro";
		cars[0][1] = "Corvette";
		cars[0][2] = "Silverado";
		cars[1][0] = "Mustang";
		cars[1][1] = "Ranger";
		cars[1][2] = "F-150";
		cars[2][0] = "Ferrari";
		cars[2][1] = "Lambo";
		cars[2][2] = "Tesla";
		*/
		
		for(int i=0; i<cars.length; i++) {
			System.out.println();
			for(int j=0; j<cars[i].length; j++) {
				System.out.print(cars[i][j]+" ");
			}
		}
	}
}

******************************************************************************

public class Main {

 public static void main(String[] args) {
  
  // String = a reference data type that can store one or more characters
  //   reference data types have access to useful methods
  
  String name = "Bro";
  
  //boolean result = name.equalsIgnoreCase("bro");
  //int result = name.length();
  //char result = name.charAt(0);
  //int result = name.indexOf("o");
  //boolean result = name.isEmpty();
  //String result = name.toUpperCase();
  //String result = name.toLowerCase();
  //String result = name.trim();
  //String result = name.replace('o', 'a');
   
  //System.out.println(result);
 }
 
}

******************************************************************************

public class Main {

 public static void main(String[] args) {
  
  // wrapper class =  provides a way to use primitive data types as reference data types
  //     reference data types contain useful methods
  //     can be used with collections (ex.ArrayList)
  
  //primitive  //wrapper
  //---------  //-------
  // boolean  Boolean
  // char   Character
  // int   Integer
  // double  Double
  
  // autoboxing = the automatic conversion that the Java compiler makes between the primitive types and their corresponding object wrapper classes
  // unboxing = the reverse of autoboxing. Automatic conversion of wrapper class to primitive
  
  Boolean a = true;
  Character b = '@';
  Integer c = 123;
  Double d = 3.14;
  
 }
 
}

************************************************************************************

import java.util.ArrayList;

public class Main {

	public static void main(String[] args) {
			
		// ArrayList = 	a resizable array. 
		//				Elements can be added and removed after compilation phase
		//				store reference data types
		
		ArrayList<String> food = new ArrayList<String>();
		
		food.add("pizza");
		food.add("hamburger");
		food.add("hotdog");
		
		//food.set(0, "sushi");
		//food.remove(2);
		//food.clear();
		
		for(int i=0; i<food.size(); i++) {
			System.out.println(food.get(i));
		}
	}
}

*********************************************************************************************

import java.util.*;

public class Main {

	public static void main(String[] args) {
		
		ArrayList<ArrayList<String>> groceryList = new ArrayList();
		
		ArrayList<String> bakeryList = new ArrayList();
		bakeryList.add("pasta");
		bakeryList.add("garlic bread");
		bakeryList.add("donuts");
		
		ArrayList<String> produceList = new ArrayList();
		produceList.add("tomatoes");
		produceList.add("zucchini");
		produceList.add("peppers");
		
		ArrayList<String> drinksList = new ArrayList();
		drinksList.add("soda");
		drinksList.add("coffee");
		
		groceryList.add(bakeryList);
		groceryList.add(produceList);
		groceryList.add(drinksList);
		
		System.out.println(groceryList);
		
	}
}

*********************************************************************************************************

import java.util.ArrayList;

public class Main {

	public static void main(String[] args) {
			
		// for-each = 	traversing technique to iterate through the elements in an array/collection
		//				less steps, more readable
		//				less flexible
		
		//String[] animals = {"cat","dog","rat","bird"};
		ArrayList<String> animals = new ArrayList<String>();
		
		animals.add("cat");
		animals.add("dog");
		animals.add("rat");
		animals.add("bird");
		
		for(String i : animals) {
			System.out.println(i);
		}
}

***********************************************************************************************************************


public class Main {

 public static void main(String[] args) {
  
  // method = a block of code that is executed whenever it is called upon
  
  int x = 3;
  int y = 4;
  
  int z = add(x,y);

  System.out.println(z);
 }
 
 static int add(int x, int y) {
  
  int z = x + y;
  return z;
  
 }
 
}

*************************************************************************************************

public class Main {

	public static void main(String[] args) {
		
		// overloaded methods = methods that share the same name but have different parameters
		//						method name + parameters = method signature
		
		double x = add(1.0,2.0,3.0,4.0);
		
		System.out.println(x);
		
	}
	
	static int add(int a, int b) {
		System.out.println("This is overloaded method #1");
		return a + b;
	}
	static int add(int a, int b, int c) {
		System.out.println("This is overloaded method #2");
		return a + b + c;
	}
	static int add(int a, int b, int c, int d) {
		System.out.println("This is overloaded method #3");
		return a + b + c + d;
	}
	static double add(double a, double b) {
		System.out.println("This is overloaded method #4");
		return a + b;
	}
	static double add(double a, double b, double c) {
		System.out.println("This is overloaded method #5");
		return a + b + c;
	}
	static double add(double a, double b, double c, double d) {
		System.out.println("This is overloaded method #6");
		return a + b + c + d;
	}	
}

******************************************************************************************************



